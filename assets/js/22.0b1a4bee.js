(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{346:function(t,n,a){"use strict";a.r(n);var s=a(3),e=Object(s.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"canvas-基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#canvas-基本用法"}},[this._v("#")]),this._v(" canvas 基本用法")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[this._v("1.什么是canvas(画布)\n\t\t<canvas> 是 HTML5 新增的元素，可用于通过使用JavaScript中的脚本来绘制图形\n\t例如，它可以用于绘制图形，创建动画。<canvas> 最早由Apple引入WebKit\n\t我们可以使用<canvas>标签来定义一个canvas元素\n\t\t-----\x3e使用<canvas>标签时，建议要成对出现，不要使用闭合的形式。\n\t\t-----\x3ecanvas元素默认具有高宽\n\t\t\t\t\twidth：  300px\n\t\t\t\t\theight：150px\n\n2.替换内容\n\t\t<canvas>很容易定义一些替代内容。由于某些较老的浏览器（尤其是IE9之前的IE浏览器）\n\t不支持HTML元素\"canvas\"，\n\t但在这些浏览器上你应该要给用户展示些替代内容。\n\t这非常简单：我们只需要在<canvas>标签中提供替换内容就可以。\n\t\t---\x3e支持<canvas>的浏览器将会忽略在容器中包含的内容，并且只是正常渲染canvas。\n\t\t---\x3e不支持<canvas>的浏览器会显示代替内容\n\n3.canvas标签的两个属性\n\t\t<canvas> 看起来和 <img> 元素很相像，唯一的不同就是它并没有 src 和 alt 属性。\n\t实际上，<canvas> 标签只有两个属性—— width和height。这些都是可选的。\n\t当没有设置宽度和高度的时候，canvas会初始化宽度为300像素和高度为150像素。\n\n\t画布的高宽\n\t\thtml属性设置width height时只影响画布本身不影画布内容\n\t\tcss属性设置width height时不但会影响画布本身的高宽，\n\t\t\t\t\t还会使画布中的内容等比例缩放（缩放参照于画布默认的尺寸）\n\n4.渲染上下文\n\t\t<canvas> 元素只是创造了一个固定大小的画布，要想在它上面去绘制内容，\n\t我们需要找到它的渲染上下文\n\t\t<canvas> 元素有一个叫做 getContext() 的方法，这个方法是用来获得渲染上下文和它的绘画功能。\n\tgetContext()只有一个参数，上下文的格式\n\t\t-----\x3e获取方式\n\t\t\t  var canvas = document.getElementById('box');\n\t\t\t  var ctx = canvas.getContext('2d');\n\n\t\t-----\x3e检查支持性\n\t\t\t  var canvas = document.getElementById('tutorial');\n\t\t\t  if (canvas.getContext){\n\t\t\t\t\tvar ctx = canvas.getContext('2d');\n\t\t\t\t}\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);